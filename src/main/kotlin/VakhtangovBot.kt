import WebScraper.scrapeSchedule
import WebScraper.updatePerformancesDatabase
import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.entities.BotCommand
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ParseMode.HTML
import kotlinx.coroutines.*
import kotlinx.coroutines.sync.Semaphore
import kotlinx.coroutines.sync.withPermit
import kotlin.random.Random

fun main() {
    val token = System.getenv("TELEGRAM_BOT_TOKEN") ?: error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    val dbName = System.getenv("DB_NAME") ?: "./data/nations-bot.db"

    initDatabase(dbName)
    updatePerformancesDatabase()

    val subscribeCommandName = "subscribe"
    val unsubscribeCommandName = "unsubscribe"
    val statusCommandName = "status"
    val subscribesCommandName = "subs"
    val performancesCommandName = "perfs"

    val bot = bot {
        this.token = token
        logger().info("Vakhatangov-bot is running...")

        dispatch {
            subscriptionCommands(subscribeCommandName, unsubscribeCommandName, statusCommandName, subscribesCommandName)
            perfCommands(performancesCommandName)
        }
    }

    val urls = setOf(
//        "https://vakhtangov.ru/show/beg/"
    )
    val performances = getAllPerformances()
        .map {
            Performance(
                id = it.id,
                title = it.title,
                url = it.url,
                scene = it.scene
            )
        }.filter { it.url in urls }

    startScheduleNotifier(bot, performances)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ Telegram
    bot.setMyCommands(
        listOf(
            BotCommand(subscribeCommandName, "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand(unsubscribeCommandName, "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
            BotCommand(statusCommandName, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
            BotCommand(performancesCommandName, "–°–ø–∏—Å–æ–∫ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π"),
            BotCommand(subscribesCommandName, "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"),
        )
    )

    bot.startPolling()
}

fun startScheduleNotifier(bot: Bot, performance: List<Performance>) {
    val scope = CoroutineScope(Dispatchers.IO)
    scope.launch {
        val semaphore = Semaphore(2) // –º–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
        while (isActive) {
            val tasks = performance.map { p ->
                async {
                    semaphore.withPermit {
                        try {
                            bot.checkTickets(p, "7 –æ–∫—Ç—è–±—Ä—è, –≤—Ç–æ—Ä–Ω–∏–∫, 19:00")
                        } catch (e: Exception) {
                            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${p.title}: ${e.message}")
                        }
                    }
                }
            }
            tasks.awaitAll() // –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            delay(Random.nextLong(5 * 1000L, 30 * 1000L)) // –æ—Ç 5 –¥–æ 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
        }
    }
}

fun Bot.checkTickets(performance: Performance, desiredDate: String) {
    logger().info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã –Ω–∞ [${performance.title}], –¥–∞—Ç—É: $desiredDate ...")

    val schedule = scrapeSchedule(performance)

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
    val matchingSchedules = schedule.filter {
        "${it.date}, ${it.dayOfWeek}, ${it.time}" == desiredDate
    }

    if (matchingSchedules.isEmpty()) {
        logger().info("[${performance.title}] –ù–∞ –¥–∞—Ç—É $desiredDate —Å–ø–µ–∫—Ç–∞–∫–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
    val availableSchedules = matchingSchedules.filter { it.ticketsAvailable }

    if (availableSchedules.isEmpty()) {
        val msg = "[${performance.title}] –ù–∞ –¥–∞—Ç—É $desiredDate –±–∏–ª–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        logger().info(msg)
        return
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    val message = availableSchedules.joinToString("") {
        "\n ‚Ä¢ –î–∞—Ç–∞: ${it.date}, –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${it.dayOfWeek}, –í—Ä–µ–º—è: ${it.time}"
    }

    val text = "üîî<b>–î–æ—Å—Ç—É–ø–Ω—ã –±–∏–ª–µ—Ç—ã –Ω–∞ [${performance.title}]:</b> $message <a href=\"${performance.url}\">–ö—É–ø–∏—Ç—å</a>"

    logger().info("[${performance.title}] –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã –Ω–∞ $desiredDate")

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
    getAllSubscribers().forEach { (userId, _) ->
        sendMessage(
            chatId = ChatId.fromId(userId),
            text = text,
            parseMode = HTML
        )
    }
}