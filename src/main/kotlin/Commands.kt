import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ParseMode.HTML

fun Dispatcher.perfCommands(
    performancesCommandName: String,
) {
    command(performancesCommandName) {
        val performances = getAllPerformances()
        if (performances.isEmpty()) {
            bot.sendMessage(ChatId.fromId(message.chat.id), "‚Ñπ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π.")
        } else {
            val messages = performances.groupBy { it.scene }.map { (scene, perfs) ->
                val header = scene?.let { if (it.isBlank()) "üé≠ –°–ø–µ–∫—Ç–∞–∫–ª–∏:" else "üé≠ –°–ø–µ–∫—Ç–∞–∫–ª–∏ –Ω–∞ —Å—Ü–µ–Ω–µ \"$scene\":" }
                val listText = perfs.joinToString("\n") { " - <a href=\"${it.url}\">${it.title}</a>" }
                "$header\n$listText"
            }
            //–≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram
            messages.forEach { part ->
                bot.sendMessage(
                    ChatId.fromId(message.chat.id),
                    part,
                    parseMode = HTML
                )
            }
        }
    }
}


fun Dispatcher.subscriptionCommands(
    subscribeCommandName: String,
    unsubscribeCommandName: String,
    statusCommandName: String,
    subscribesCommandName: String
) {
    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    command(subscribeCommandName) {
        val userId = message.from?.id ?: return@command
        val firstName = message.from?.firstName ?: "–ë–µ–∑ –∏–º–µ–Ω–∏"
        val lastName = message.from?.lastName
        val username = message.from?.username

        if (isSubscribed(userId)) {
            bot.sendMessage(ChatId.fromId(userId), "‚Ñπ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
            logger().info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $firstName $lastName (ID: $userId) —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
        } else {
            addSubscriber(userId, firstName, lastName, username)
            bot.sendMessage(ChatId.fromId(userId), "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            logger().info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $firstName $lastName (ID: $userId) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        }
    }
    // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
    command(unsubscribeCommandName) {
        val userId = message.from?.id ?: return@command
        val firstName = message.from?.firstName ?: "–ë–µ–∑ –∏–º–µ–Ω–∏"
        val lastName = message.from?.lastName
        if (isSubscribed(userId)) {
            removeSubscriber(userId)
            bot.sendMessage(ChatId.fromId(userId), "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            logger().info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $firstName $lastName (ID: $userId) –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        } else {
            bot.sendMessage(ChatId.fromId(userId), "‚Ñπ –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        }
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    command(statusCommandName) {
        val userId = message.from?.id ?: return@command
        val statusMessage = if (isSubscribed(userId)) {
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        } else {
            "‚ùå –í—ã –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        }
        bot.sendMessage(ChatId.fromId(userId), statusMessage)
    }
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    command(subscribesCommandName) {
        val subscribersList = getAllSubscribers()
        if (subscribersList.isEmpty()) {
            bot.sendMessage(ChatId.fromId(message.chat.id), "‚Ñπ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        } else {
            val listText = subscribersList.joinToString("\n") { "${it.second} (ID: ${it.first})" }
            bot.sendMessage(ChatId.fromId(message.chat.id), "üìú –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n$listText")
        }
    }
}